---
title: "my_pyro"
author: "Cody Spiegel"
date: "3/22/2022"
output: word_document
---

```{r setup chunk, setup, include = FALSE, cache=FALSE, message=FALSE, warning=FALSE}
if (!require('knitr')) install.packages('knitr'); library('knitr')
knitr::opts_chunk$set(warning=FALSE, message=FALSE, fig.align='center')

# load packages
if (!require("pacman")) install.packages("pacman") # for rapid install if not in library

# use pacman to load all the packages you are missing!
pacman::p_load('knitr', 'lme4', 'lmerTest', 'tidyverse', 'magrittr', 'effects', 'plyr', 'dplyr', 
               'plotrix', 'car',"gridExtra", "cowplot", "tools")
Fig.formatting<-(theme_classic()) +
  theme(text=element_text(size=10),
        legend.text.align = 0,
        panel.border = element_rect(fill=NA, colour = "black", size=1),
        aspect.ratio=1, 
        axis.ticks.length=unit(0.25, "cm"),
        axis.text.y=element_text(
          margin=unit(c(0.5, 0.5, 0.5, 0.5), "cm"), colour="black", size=10), 
        axis.text.x=element_text(
          margin=unit(c(0.5, 0.5, 0.5, 0.5), "cm"), colour="black", size=8)) +
  theme(legend.key.size = unit(0.4, "cm")) +
  theme(aspect.ratio=1.3) +
  theme(panel.spacing=unit(c(0, 0, 0, 0), "cm"))


```
###DOC  
import and do a loop to clean up all files and make stacked data in single df
```{r}
## import treatment IDs
IDs<-read.csv("/Users/tobyspiegel2/Desktop/My_pyromania/Pyromania/data/treatment.IDs.csv")

##### grab files in a list
Total.DOC.files <- list.files(path="/Users/tobyspiegel2/Desktop/My_pyromania/Pyromania/data/DOC.TN", pattern = "csv$", full.names = T)
Total.DOC.files

##### what are the file names, sans extensions using package 'tools'
file.names<-file_path_sans_ext(list.files(path="/Users/tobyspiegel2/Desktop/My_pyromania/Pyromania/data/DOC.TN", pattern = "csv$", full.names = F))
file.names
############ formatting all data in for loop
  for(i in 1:length(Total.DOC.files))
    {
  data<-read.csv(Total.DOC.files[i], sep=",")
  data<-data[,c(1,3,4)] # removed columns we don't need
  data$File<-Total.DOC.files[i]
  colnames(data)<-c("Tank", "DOC..mg.L", "TN..mg.L", "File")
  data$Tank<- IDs$Tank
  data$Tank<-as.numeric(as.character(data$Tank)) # make the column of samples all numeric
  data <- data[!is.na(as.numeric(as.character(data$Tank))),] # remove all rows that aren't numeric/tanks
  data$Treatment<-IDs$Treatment
  data$plant.mass..g<-IDs$plant.mass..g
  make.names(assign(paste(file.names[i], sep=""), data)) # make the file name the name of new df for loop df
  }
########## this is the end of the loop


ls() #see all dfs you've made, the above will be df matching their file names

#Combine files from loop to single df
DOC.df<-rbind(DOC_T0, DOC_T1, DOC_T2, DOC_T3, DOC_T4)

DOC.df$File<-substr(DOC.df$File, 64, 74) 
# alternative way to code the above
#give the 10th-24th character of the file name, removing the rest
#DOC.df$File<-substr(DOC.df$File, 13, 27) 

#alternatively
# remove the 9 letters ('^.) at start 
# remove the 4 letters (.$') at end
#DOC.df$File<-gsub('^.........|....$', '', DOC.df$File) 

# if equals DOC_T0_11052021 then, T0, if not then T1
DOC.df$Time.point<- as.factor(ifelse(DOC.df$File=="DOC_T0.csv", "T0",
         ifelse (DOC.df$File=="DOC_T1.csv", "T1",
           ifelse (DOC.df$File=="DOC_T2.csv", "T2", 
                   ifelse(DOC.df$File=="DOC_T3.csv", "T3", "T4")))))

#rearrange
library(dplyr)
DOC.df<- DOC.df %>% 
  dplyr::select(File, Time.point, Treatment, Tank, plant.mass..g, DOC..mg.L, TN..mg.L) 

#visualize
ggplot(DOC.df, aes(x= plant.mass..g, y= DOC..mg.L, color= Treatment))+
  geom_point()+
  geom_line(alpha= 0.5)+
  geom_smooth(method= "gam", formula = y~s(x,k=15))+
  facet_grid(~Time.point, scales = "free")




DOC.T0<-ggplot(DOC.df[(DOC.df$Time.point=="T0"),], aes(x=plant.mass..g, y=DOC..mg.L, color=Treatment)) +
  geom_point() +
  scale_color_manual(values = c("brown1", "mediumseagreen")) + 
  geom_smooth(method=loess, aes(fill=Treatment), alpha=0.1) +
  coord_cartesian(ylim=c(0, 60)) +
  ggtitle("Time-0") +
  ylab("DOC (mg/L)") +
  xlab("plant material (g)") +
  Fig.formatting

extract.legend <- get_legend(
  # create some space to the left of the legend
  DOC.T0 + theme(legend.box.margin = margin(0, 0, 0, 10)))

DOC.T1<-ggplot(DOC.df[(DOC.df$Time.point=="T1"),], aes(x=plant.mass..g, y=DOC..mg.L, color=Treatment)) + 
  geom_point() +
  scale_color_manual(values = c("brown1", "mediumseagreen")) + 
  geom_smooth(method=loess, aes(fill=Treatment), alpha=0.1) +
  coord_cartesian(ylim=c(0, 60)) +
  ggtitle("Time-1") +
  ylab("DOC (mg/L)") +
  xlab("plant material (g)") +
  Fig.formatting
  
DOC.T2<-ggplot(DOC.df[(DOC.df$Time.point=="T2"),], aes(x=plant.mass..g, y=DOC..mg.L, color=Treatment)) + 
  geom_point() +
  scale_color_manual(values = c("brown1", "mediumseagreen")) + 
  geom_smooth(method=loess, aes(fill=Treatment), alpha=0.1) +
  coord_cartesian(ylim=c(0, 60)) +
  ggtitle("Time-2") +
  ylab("DOC (mg/L)") +
  xlab("plant material (g)") +
  Fig.formatting

  
DOC.T3<-ggplot(DOC.df[(DOC.df$Time.point=="T3"),], aes(x=plant.mass..g, y=DOC..mg.L, color=Treatment)) + 
  geom_point() +
  scale_color_manual(values = c("brown1", "mediumseagreen")) + 
  geom_smooth(method=loess, aes(fill=Treatment), alpha=0.1) +
  coord_cartesian(ylim=c(0, 60)) +
  ggtitle("Time-3") +
  ylab("DOC (mg/L)") +
  xlab("plant material (g)") +
  Fig.formatting

DOC.T4<-ggplot(DOC.df[(DOC.df$Time.point=="T4"),], aes(x=plant.mass..g, y=DOC..mg.L, color=Treatment)) + 
  geom_point() +
  scale_color_manual(values = c("brown1", "mediumseagreen")) + 
  geom_smooth(method=loess, aes(fill=Treatment), alpha=0.1) +
  coord_cartesian(ylim=c(0, 60)) +
  ggtitle("Time-4") +
  ylab("DOC (mg/L)") +
  xlab("plant material (g)") +
  Fig.formatting



DOC.plots<-plot_grid(
  DOC.T0+ theme(legend.position = "none"),
  DOC.T1+ theme(legend.position = "none"),
  DOC.T2+ theme(legend.position = "none"),
  DOC.T3+ theme(legend.position = "none"),
  DOC.T4+ theme(legend.position = "none"),
  extract.legend, 
  rel_widths = c(8,8,8,8, 8, 3), ncol=6)


DOC.plots


```
Using GAM

```{r}
library(mgcv)
library(lme4)

DOC.df$Treatment=as.factor(DOC.df$Treatment)

#This won't work
m0.lmer=lmer(DOC..mg.L~Treatment  + plant.mass..g + (1|Time.point), data=DOC.df)
summary(m0.lmer)
qqnorm(resid(m0.lmer))
qqline(resid(m0.lmer))

#Gam with random effects
m0.gam=gam(DOC..mg.L ~  Treatment + s(Time.point, bs = 're') + s(plant.mass..g, Time.point, bs = 're'),
  data = DOC.df,
  method = 'REML'
)
summary(m0.gam)
#Note that we use s to denote a smooth term in the parlance of additive models, and the bs = 're' specifies that we want it as a random effect (as opposed to a spline or other basis function). The second smooth term s(Days, Subject, bs = 're') denotes random coefficients for the Days covariate.

#Aside from the syntax, the underlying model between the two is the same, and the following shows that we obtain the same results for both lme4 and mgcv.

#compare them:
summary(m0.lmer, cor=F)
summary(m0.gam)


# extract just the fixed effects for later.
install.packages("mixedup")
library(mixedup)
mixed_fe = extract_fixed_effects(m0.lmer, digits = 5)
gam_fe   = extract_fixed_effects(m0.gam, digits = 5)  # coefs with se and confidence interval

# variance components
lmer_vcov = extract_vc(m0.lmer, digits = 5)
gam_vcov  = extract_vc(m0.gam, digits = 5)    # cleaner gam.vcomp

#observation have some distribution
#wiggliness is smooth
#assumptions for glm hold true for GAM...must be satisfied 

####Gamma distribution
#model 1: basic model fit to all data
m1.gam=gam(DOC..mg.L~  
             s(plant.mass..g) + #smooth of mass (trend)
             s(Time.point, bs="re"),#random effect of time point
           data= DOC.df,
           family= Gamma(link = "inverse"),#for positive skewed data
           methods= 'REML',
           select=TRUE)
summary(m1.gam)
gam.check(m1.gam, rep= 1000)

#model 2: by treatment
m2.gam=gam(DOC..mg.L~ Treatment + #treatment means
             s(plant.mass..g,  by=Treatment) + #treatment specific trends
             s(Time.point, bs="re"),#random effect of time point 
           data= DOC.df,
           family= Gamma(link = "inverse"),#for positive skewed data
           methods= 'REML',
           select=TRUE)
summary(m2.gam)
gam.check(m2.gam, rep= 1000)

#model 3: individual trends
m3.gam=gam(DOC..mg.L~ 
             s(plant.mass..g, Time.point, bs="fs", k=15),#time point specific trends
           data= DOC.df,
           family= Gamma(link = "inverse"),#for positive skewed data
           methods= 'REML',
           select=TRUE)
summary(m3.gam)
gam.check(m3.gam, rep= 1000)

#model 4: treatment specific trends, plus individual trends
m4.gam=gam(DOC..mg.L~ Treatment + #main effect
             s(plant.mass..g, k=15)+
             s(plant.mass..g, by=Treatment, k=15, m=1) + #treatment specific trends
             s(plant.mass..g, Time.point, bs="fs", k=15),#time point specific trends
           data= DOC.df,
           family= Gamma(link = "log"),#for positive skewed data
           methods= 'REML', 
           select=TRUE)#more penalization
summary(m4.gam)
gam.check(m4.gam, rep= 1000)#looking at residuals
draw(m4.gam)
appraise(m4.gam, method = "simulate")
k.check(m4.gam)

#model 5 ****** looks like we found our winner ********
m5.gam= gam(log10(DOC..mg.L)~ Treatment + 
              s(plant.mass..g, k=15)+
              s(plant.mass..g, by= Treatment, k=15)+ 
               s(plant.mass..g, Time.point, bs="fs", k=15),
           data= DOC.df,
           family= gaussian(link = "inverse"),
           methods= 'REML',
           select= TRUE)
summary(m5.gam)
draw(m5.gam)
gam.check(m5.gam, rep=1000)
```

compare lmer and gam
```{r}
#uncorrelated random effects to lmer
m6.lmer= lmer(log10(DOC..mg.L) ~ Treatment:plant.mass..g +
                (1 |Time.point), #random intercepts
              REML= T,
              data= DOC.df)
summary(m6.lmer)$varcor
summary(m6.lmer)


#gam
m6.gam=gam(DOC..mg.L ~ Treatment:plant.mass..g +
                  s(Time.point, bs = 're') +
                  s(Time.point, plant.mass..g, bs = 're'),
              data = DOC.df, method = 'REML')
variance_comp(m6.gam)


?glm

gam.check(m6.gam, rep=1000)
draw(m6.gam)


# I  added m = 1 to the by factor smooth as the separate smooths by levels of a factor can ofetn be concurved with the global smooth of the same covariate. 

visreg(m4.gam, xvar = "plant.mass..g",
       by = "Time.point", data = DOC.df,
       method = "REML")

```


```{r}

###Gaussian 

















#lets check the model
  #set k per term using gam.check() and we now see that the max is 15...we check our k term and edf to see that its all good!

#residuals should be Gaussian 
#the 4 residuals plot look pretty good with model 4!
#we see heteroskedasticity at higher mass so this does make sense but still lies on a one to one line

#model 5
m5.gam= gam(log10(DOC..mg.L)~ Treatment + + s(plant.mass..g, bs='tp') + s(Time.point, bs= 're'),
           data= DOC.df,
           family= gaussian(link = "identity"),
           methods= 'REML')
summary(m5.gam)
#rep only affects qqplot to show CI on plot, rep should be high
gam.check(m5.gam, rep=2000)
plot.gam(m5.gam, seWithMean = T)


#model 6 is the same as model 5 expect we changed smooth function for plant mass to "ts" this has the lowest AIC value
m6.gam= gam(DOC..mg.L~ Treatment + + s(plant.mass..g, bs='tp') + s(Time.point, bs= 're'),
           data= DOC.df,
           family= Gamma(link = "inverse"),
           methods= 'REML')
summary(m6.gam)


#model 7
m7.gam= gam(log10(DOC..mg.L)~ Treatment + s(plant.mass..g, bs='tp', k=15) + s(Time.point, bs= 're'),
           data= DOC.df,
           family= gaussian(link = "log"),
           methods= 'REML')
summary(m7.gam)
gam.check(m7.gam, rep=1000)


#model 8
m8.gam= gam(DOC..mg.L~ Treatment + s(plant.mass..g, bs='tp', k=15) + s(Time.point, bs= 're'),
           data= DOC.df,
           family= Gamma(link = "inverse"),
           methods= 'REML')

summary(m8.gam)
gam.check(m8.gam, rep=1000)


#model 9
m9.gam= gam(log10(DOC..mg.L)~ Treatment + s(plant.mass..g, Treatment, bs='fs', k=15) + s(Time.point, bs= 're'),
           data= DOC.df,
           family= gaussian(link = "identity"),
           methods= 'REML')

summary(m9.gam)
gam.check(m9.gam, rep=1000)

#model 10
m10.gam= gam(DOC..mg.L~ Treatment + s(plant.mass..g, Treatment, bs="fs", k=15) + s(Time.point, bs= 're'),
           data= DOC.df,
           family= Gamma(link = "inverse"),
           methods= 'REML')

summary(m10.gam)
gam.check(m10.gam, rep=1000)


#model 11
m11.gam= gam(log10(DOC..mg.L)~ Treatment + s(plant.mass..g, Treatment, bs='fs', k=15) + s(plant.mass..g, Time.point, bs= 'fs', k=15),
           data= DOC.df,
           family= gaussian(link = "identity"),
           methods= 'REML',
           select= TRUE,
           gamma=1.4)

summary(m11.gam)
gam.check(m11.gam, rep=1000)

#model 12
m12.gam= gam(DOC..mg.L~ Treatment + s(plant.mass..g, by= Treatment,bs="fs", k=15) + s(plant.mass..g, Time.point, bs="fs", k=15),
           data= DOC.df,
           family= Gamma(link = "inverse"),
           methods= 'REML',
           select= TRUE,
           )

summary(m12.gam)
gam.check(m12.gam, rep=1000)
AIC(m12.gam, m13.gam)




#model 15
#allow different random smooths in the two methods
m15.gam=gam(DOC..mg.L ~ Treatment + s(plant.mass..g, bs="cs", k=15) + s(plant.mass..g, Time.point, bs = 'fs', by = Treatment),
           data = DOC.df, method = 'REML', family= Gamma(link = "log"), select= TRUE)
summary(m15.gam)
#the bs='fs' is a bs class that produces a smooth for each level of a single factor variable.

gam.check(m14.gam, rep=1000)

AIC(m14.gam, m15.gam)
```


```{r}
#model 14
m14.gam= gam(DOC..mg.L~ Treatment+ s(plant.mass..g, by=Treatment, bs="fs", k=15) + s(plant.mass..g, by=Time.point, bs="cs", k=15) +s(Time.point, by=Treatment, bs="re"),
           data= DOC.df,
           family= Gamma(link = "inverse"),
           methods= 'REML',
           select= TRUE)
summary(m14.gam)
#(Note that it is by = species, not "species".) This is the same as the above, except the random effect is nested in the levels of the factor species. What this means practically is that the amount of shrinkage over all the locations can vary between species. This is because each smooth generated by by = species gets its own smoothness parameter, 𝜆, and it is this that controls the degree of shrinkage (penalisation) that each "smooth" is subject to. We're just using the equivalence of smooths and random effects to fit the equivalence of i.i.d. Gaussian random effects in these GAMs.

m15.gam= gam(DOC..mg.L~ Treatment+ s(plant.mass..g, by=Treatment, bs="fs", k=15) + s(plant.mass..g, Time.point, bs="fs", k=15) + s(Time.point, Treatment, bs="re"),
           data= DOC.df,
           family= Gamma(link = "inverse"),
           methods= 'REML',
           select= TRUE)
summary(m15.gam)
#Assuming that both location and species are factors, then you would get a random intercept for the groups formed by the interaction of location and species.


AIC(m14.gam, m15.gam)
#model 15
#random intercept
m15.gam= gam(DOC..mg.L~ Treatment+ s(plant.mass..g, by=Treatment) + s(Time.point, bs="re"),
           data= DOC.df,
           family= Gamma(link = "inverse"),
           methods= 'REML',
           select= TRUE)
summary(m15.gam)

#model 16
#random slope 
m16.gam= gam(DOC..mg.L~ Treatment+ s(plant.mass..g, by=Treatment) + s(Time.point, plant.mass..g, bs="re"),
           data= DOC.df,
           family= Gamma(link = "inverse"),
           methods= 'REML',
           select= TRUE)
summary(m16.gam)

#model 17
#random intercepts and slopes
m17.gam= gam(DOC..mg.L~ Treatment+ s(plant.mass..g, by=Treatment) + s(Time.point, bs="re") + s(Time.point, plant.mass..g, bs="re"),
           data= DOC.df,
           family= Gamma(link = "inverse"),
           methods= 'REML',
           select= TRUE)
summary(m17.gam)

#model 18
#random smooths
m18.gam= gam(DOC..mg.L~ Treatment+ s(plant.mass..g, by=Treatment) + s(plant.mass..g, Time.point, bs="fs", m=1),
           data= DOC.df,
           family= Gamma(link = "inverse"),
           methods= 'REML',
           select= TRUE)
summary(m18.gam)
# random smooths:
plot(m18.gam, select=3)
# add horizontal line:
abline(h=0)

#model 19
#random smooths
m19.gam= gam(DOC..mg.L~ Treatment+ s(plant.mass..g, by=Treatment, k=15) + s(plant.mass..g, Time.point, bs="fs", m=1, k=15),
           data= DOC.df,
           family= Gamma(link = "inverse"),
           methods= 'REML',
           select= TRUE)

summary(m19.gam)
gam.check(m19.gam, rep=1000)

#model 20
#random smooths\
install.packages("gamm4")
library(gamm4)
m20.gam=
#model 20
  ctrl=gam.control(nthreads = 4)
m20.gam=gam(DOC..mg.L~Treatment + s(plant.mass..g, by=Treatment, k=15) + te(Treatment, plant.mass..g), data= DOC.df, methods="REML", family = Gamma(link = "inverse"), select=TRUE)
summary(m20.gam)
gam.check(m20.gam)


summary(m20.gam)

df$predicted1 <- predict(fit1$gam)

ggplot(df,aes(x,y))+geom_point()+facet_wrap(~block)+
      geom_line(aes(x=x,y=predicted1),colour="red")
summary(m20.gam)
gam.check(m20.gam, rep=1000)

AIC(m13.gam,m19.gam)
library(visreg)
visreg(m14.gam, xvar = "plant.mass..g",
       by = "Time.point", data = DOC.df,
       method = "REML")

predict.gam(m19.gam)

#does this by estimating a separate smoother for each level of f (assuming that f is a standard factor), and indeed, a separate smoothness parameter is estimated for each smooth also.

#We include time point as a predictor in all models; this pattern (time points have different curves) is obvious. In other words, “ curves differ by time but dose doesn’t have any clear effects” is our null model/hypothesis.

#We have three options for the vertical shift of the curves (aka changes in intercept):
#Time point: 0-4 have different overall DOC concentrations
#Time point+Treatment: additive effects on overall DOC concentration
#Time point*Treatment: interaction effect

#Three options for changes in the curve by group:
#s(plant.mass..g,by=Time point): 0-4 have different curves
#s(plant.mass..g,by=Treatment)+s(plant.mass..g,by=Time.point): additive effects
#s(plant.mass..g,by=Treatment_Time point): interactive effects


#And three options for random effects:
#1: no random effect, all data pooled
#s(mother_id,bs='re'): random effects on overall size (vertical shift in growth curves)
#s(week,mother_id,bs='fs'): random effects on growth curve
```


```{r}
m19.gam.pred=predict_gam(m19.gam)
m19.gam.pred %>%
  ggplot(aes(plant.mass..g, fit)) +
  geom_smooth_ci(Treatment)+
  facet_grid(~Time.point)

gam.check(m14.gam, rep=1000)
gam.check(m15.gam, rep=1000)
```


```{r}
#gamm

m1.gamm = gamm(DOC..mg.L~ Treatment + s(plant.mass..g,bs="tp"), random = list(Time.point=~1),
         data=DOC.df, correlation=corAR1())
m1.gamm$gam%>% summary()

m2.gamm = gamm(DOC..mg.L~ Treatment + s(plant.mass..g,bs="tp"), random = list(Time.point=~Treatment),
         data=DOC.df, correlation=corAR1())
m2.gamm$gam%>% summary()


m3.gamm = gamm(DOC..mg.L~ Treatment + s(plant.mass..g, bs="tp") + s(Time.point, bs='re'),
         data=DOC.df, correlation=corAR1())
m3.gamm$gam%>% summary()

m4.gamm= gamm(DOC..mg.L ~ Treatment + s(plant.mass..g, Treatment, bs="fs")+ s(plant.mass..g, Treatment, bs="fs"), random= list(Time.point=~1), data=DOC.df, correlation=NULL, family = Gamma)


m4.gamm$gam%>%summary()



anova(m1.gamm$lme, m2.gamm$lme, m3.gamm$lme, m4.gamm$lme)
```


```{r}
####log10DOC with Gaussian dist. and various factors
#model 14

m14.gam=gam(log10(DOC..mg.L)~ Treatment + s(plant.mass..g, Time.point, bs="fs", k=15) + s(plant.mass..g, by= Treatment, bs= "gp", k= 15),
           data= DOC.df,
           family= gaussian(link = "identity"),
           methods= 'REML',
           select = TRUE)
summary(m14.gam)
gam.check(m14.gam, rep=1000)

#model 15

m15.gam=gam((DOC..mg.L)^1/3~ Treatment + s(plant.mass..g, Time.point, bs="fs", k=15) + s(plant.mass..g, by= Treatment, bs= "ts", k= 15),
           data= DOC.df,
           family= gaussian(link = "identity"),
           methods= 'REML',
           select = TRUE)
summary(m15.gam)
gam.check(m15.gam, rep=1000)

#model 16 *************** I found the best fitting one

m16.gam=gam(log10(DOC..mg.L)~ Treatment + s(plant.mass..g, Time.point, bs="fs", k=15) + s(plant.mass..g, by= Treatment, bs= "ts", k= 15)-1,
           data= DOC.df,
           family= gaussian(link = "identity"),
           methods= 'REML',
           select = TRUE)
summary(m16.gam)
gam.check(m16.gam, rep=1000)


AIC(m16.gam, m16.gam2)

plot(m16.gam, select=1)
abline(h=0)



#model 17

m17.gam=gam(log10(DOC..mg.L)~ Treatment + s(plant.mass..g, Time.point, bs="fs", k=15) + s(plant.mass..g, by= Treatment, bs= "cs", k= 15),
           data= DOC.df,
           family= gaussian(link = "identity"),
           methods= 'REML',
           select = TRUE)
summary(m17.gam)
gam.check(m17.gam, rep=1000)

AIC(m14.gam, m15.gam, m16.gam, m17.gam)
####gamma family

#model 18

m18.gam=gam(DOC..mg.L~ Treatment + s(plant.mass..g, Time.point, bs="fs", k=15) + s(plant.mass..g, by= Treatment, bs= "tp", k= 15),
           data= DOC.df,
           family= Gamma(link = "inverse"),
           methods= 'REML',
           select = TRUE)
summary(m18.gam)
gam.check(m18.gam, rep=1000)

#model 19
m19.gam=gam(DOC..mg.L~ Treatment + s(plant.mass..g, Time.point, bs="fs", k=15) + s(plant.mass..g, by= Treatment, bs= "tp", k= 15),
           data= DOC.df,
           family= Gamma(link = "inverse"),
           methods= 'REML'
           )
summary(m19.gam)
gam.check(m19.gam, rep=1000)

AIC(m18.gam, m19.gam, m20.gam)



#comparing models
AIC(m14.gam, m15.gam, m16.gam, m17.gam)

library(visreg)

visreg(m18.gam, "plant.mass..g", "Time.point", gg=TRUE, ylab="DOC..mg.L")

```
```{r}
#compare quad model and gam
m.quad = lmer(DOC..mg.L ~ Treatment + plant.mass..g + I(plant.mass..g^2) + (1|Time.point), data=DOC.df)  
summary(m.quad)
plot(m.quad)
qqnorm(resid(m.quad))
qqline(resid(m.quad))
m12.gam= gam(DOC..mg.L~ Treatment + s(plant.mass..g, Treatment, bs="fs", k=15) + s(plant.mass..g, Time.point, bs= 'fs', k=15),
           data= DOC.df,
           family= Gamma(link = "inverse"),
           methods= 'REML',
           select= TRUE)
gam.check(m12.gam, rep=1000)

#we can see how each method fits the data
ggplot(data=DOC.df, aes(x=plant.mass..g, y=DOC..mg.L)) +  
      geom_point(aes(col=Treatment))  +  
      geom_smooth(method = "lm", se = F, col="red")+  
      geom_smooth(method="gam", formula=y~s(x), se = F, col="blue") +  
      stat_smooth(method="lm", formula=y~x+I(x^2),se = F, col="green")+
      facet_grid(Treatment~Time.point)






```








DOC ANCOVA 
After some reflection, and trying different models, I think that running separate ANCOVA's by sampling period is the way to go—thanks Chris. Initially, I started with a linear mixed model with time point as a random effect, yet the data is nonlinear so that gave me trouble. And while fitting the data to a GAM might also be an option, it can get slightly complicated due to the different splines applied to each covariate...but more on that later. Below are separate ANCOVA's for each time point and some visuals to accompany them. Enjoy:
```{r}
library(ggplot2)
library(ggpubr)
library(tidyverse)
library(rstatix)
library(broom)

#Let's first look at the raw data:
#histogram by time point
g.0.raw = DOC_T0$DOC..mg.L
m.0.raw<-mean(g.0.raw)
std.0.raw<-sqrt(var(g.0.raw))

g.1.raw = DOC_T1$DOC..mg.L
m.1.raw<-mean(g.1.raw)
std.1.raw<-sqrt(var(g.1.raw))

g.2.raw = DOC_T2$DOC..mg.L
m.2.raw<-mean(g.2.raw)
std.2.raw<-sqrt(var(g.2.raw))

g.3.raw = DOC_T3$DOC..mg.L
m.3.raw<-mean(g.3.raw)
std.3.raw<-sqrt(var(g.3.raw))

g.4.raw = DOC_T4$DOC..mg.L
m.4.raw<-mean(g.4.raw)
std.4.raw<-sqrt(var(g.4.raw))

par(mfrow=c(2,3))
hist(g.0.raw, density=20, breaks=9, prob=TRUE, xlab="DOC mg/L", main="normal curve over Time 0")
curve(dnorm(x, mean=m.0.raw, sd=std.0.raw), 
      col="darkblue", lwd=2, add=TRUE, yaxt="n")
hist(g.1.raw, density=20, breaks=9, prob=TRUE, xlab="DOC mg/L", main="normal curve over Time 1")
curve(dnorm(x, mean=m.1.raw, sd=std.1.raw), 
      col="darkblue", lwd=2, add=TRUE, yaxt="n")
hist(g.2.raw, density=20, breaks=9, prob=TRUE, xlab="DOC mg/L", main="normal curve over Time 2")
curve(dnorm(x, mean=m.2.raw, sd=std.2.raw), 
      col="darkblue", lwd=2, add=TRUE, yaxt="n")
hist(g.3.raw, density=20, breaks=9, prob=TRUE, xlab="DOC mg/L", main="normal curve over Time 3")
curve(dnorm(x, mean=m.3.raw, sd=std.3.raw), 
      col="darkblue", lwd=2, add=TRUE, yaxt="n")
hist(g.4.raw, density=20, breaks=9, prob=TRUE, xlab="DOC mg/L", main="normal curve over Time 4")
curve(dnorm(x, mean=m.4.raw, sd=std.4.raw), 
      col="darkblue", lwd=2, add=TRUE, yaxt="n")
```
We can see that the raw data is skewed. And while the residuals are important I figured it might also be best to log transform the DOC concentration.

```{r}
#The raw data is skewed somake log transformed column
DOC.df$DOC.log=log10(DOC.df$DOC..mg.L)
DOC_T0$log=log10(DOC_T0$DOC..mg.L)
DOC_T1$log=log10(DOC_T1$DOC..mg.L)
DOC_T2$log=log10(DOC_T2$DOC..mg.L)
DOC_T3$log=log10(DOC_T3$DOC..mg.L)
DOC_T4$log=log10(DOC_T4$DOC..mg.L)

#log transformed 
g.0 = DOC_T0$log
m.0<-mean(g.0)
std.0<-sqrt(var(g.0))

g.1 = DOC_T1$log
m.1<-mean(g.1)
std.1<-sqrt(var(g.1))

g.2 = DOC_T2$log
m.2<-mean(g.2)
std.2<-sqrt(var(g.2))

g.3 = DOC_T3$log
m.3<-mean(g.3)
std.3=sqrt(var(g.3))

g.4 = DOC_T4$log
m.4<-mean(g.4)
std.4<-sqrt(var(g.4))

par(mfrow=c(2,3))
hist(g.0, density=20, breaks=9, prob=TRUE, xlab="DOC mg/L", main="normal curve over Time 0")
curve(dnorm(x, mean=m.0, sd=std.0), 
      col="darkblue", lwd=2, add=TRUE, yaxt="n")
hist(g.1, density=20, breaks=9, prob=TRUE, xlab="DOC mg/L", main="normal curve over Time 1")
curve(dnorm(x, mean=m.1, sd=std.1), 
      col="darkblue", lwd=2, add=TRUE, yaxt="n")
hist(g.2, density=20, breaks=9, prob=TRUE, xlab="DOC mg/L", main="normal curve over Time 2")
curve(dnorm(x, mean=m.2, sd=std.2), 
      col="darkblue", lwd=2, add=TRUE, yaxt="n")
hist(g.3, density=20, breaks=9, prob=TRUE, xlab="DOC mg/L", main="normal curve over Time 3")
curve(dnorm(x, mean=m.3, sd=std.3), 
      col="darkblue", lwd=2, add=TRUE, yaxt="n")
hist(g.4, density=20, breaks=9, prob=TRUE, xlab="DOC mg/L", main="normal curve over Time 4")
curve(dnorm(x, mean=m.4, sd=std.4), 
      col="darkblue", lwd=2, add=TRUE, yaxt="n")
```
I added this transformation in to perhaps spark some discussion about whether or not this is appropriate since the log transformation makes the interpretation of the analysis a little more difficult. In the situation where the normality assumption is not met, however, we could consider running the  tests on the transformed and non-transformed data to see if there are any meaningful differences. If both tests lead to the same conclusions, we might not choose to do any transformation and just carry on with the original data. 

ANCOVA on raw DOC 
```{r}
#visually insepct the data
scat.0=ggscatter(
  DOC_T0, x = "plant.mass..g", y = "DOC..mg.L",
  facet.by  = c("Treatment"), 
  short.panel.labs = FALSE
  )+
  stat_smooth(method = "loess")


scat.1=ggscatter(
  DOC_T1, x = "plant.mass..g", y = "DOC..mg.L",
  facet.by  = c("Treatment"), 
  short.panel.labs = FALSE
  )+
  stat_smooth(method = "loess")

scat.2=ggscatter(
  DOC_T2, x = "plant.mass..g", y = "DOC..mg.L",
  facet.by  = c("Treatment"), 
  short.panel.labs = FALSE
  )+
  stat_smooth(method = "loess")


scat.3=ggscatter(
  DOC_T3, x = "plant.mass..g", y = "DOC..mg.L",
  facet.by  = c("Treatment"), 
  short.panel.labs = FALSE
  )+
  stat_smooth(method = "loess")


scat.4=ggscatter(
  DOC_T4, x = "plant.mass..g", y = "DOC..mg.L",
  facet.by  = c("Treatment"), 
  short.panel.labs = FALSE
  )+
  stat_smooth(method = "loess")


all.scat=plot_grid(scat.0,  scat.1, scat.2,   scat.3,   scat.4, rel_widths =c(8,8,8,8,8), ncol=3, nrow=2)

all.scat
```


After adjustment for plant mass, there was no significance of treatment on DOC, F(1, 27) = 0.183, p = 0.672. 


UVBIO files and plots
```{r}
##### grab files in a list
UVBio.files <- list.files(path="/Users/tobyspiegel2/Desktop/My_pyromania/Pyromania/data/UVBIO", pattern = "csv$", full.names = T)
UVBio.files

##### what are the file names, sans extensions using package 'tools'
file.names<-file_path_sans_ext(list.files(path="/Users/tobyspiegel2/Desktop/My_pyromania/Pyromania/data/UVBIO", pattern = "csv$", full.names = F))
file.names


############ formatting all data in for loop
  for(i in 1:length(UVBio.files))
    {
  data<-read.csv(UVBio.files[i], sep=",") #skip 13 rows where standards are
  data<-data[,c(1,3,4)] # removed columns we don't need
  data$File<-UVBio.files[i]
  colnames(data)<-c("Tank", "DOC..mg.L", "TN..mg.L", "File") 
  data$Tank<-as.character(data$Tank)
  data$Treatment<-IDs$Treatment # add treatment info
  data$plant.mass..g<-IDs$plant.mass..g # add plant biomass info
  make.names(assign(paste(file.names[i], sep=""), data)) # make the file name the name of new df for loop df
  }
########## this is the end of the loop

ls() #see all dfs you've made, the above will be df matching their file names

#Combine files from loop to single df
UVBIO.df<-rbind(DOC_NoUV_T1, DOC_UV_T1, DOC_NoUV_T2, DOC_UV_T2, DOC_NoUV_T3, DOC_UV_T3)

# make new factors for filtered (F/NF) and UV (+/-)
# ** caution! Make sure this matches sheet layout after the loop!

UVBIO.df$Filter.Trt<-rep(c("Filtered", "Unfiltered"), each=30) # repeat 30 times
UVBIO.df$UV.Trt<-rep(c("NoUV", "UV"), each=60) # repeat 60 times

# check tank names in DF and make sure they are what you think they are (i.e 1-30 but w/ weird names)
Tank.fix<-rep(c(1:30), times=12) # repeat 12 times to fix all the strange tank names 

#compare tank IDS
df.test<-cbind(Tank.fix, UVBIO.df$Tank) # yep!

UVBIO.df$Tank<-as.factor(Tank.fix) #replace old tank names

# extract out the file names
UVBIO.df$File <- UVBIO.df$File<-substr(UVBIO.df$File, 63, 77)  # extract sample names
UVBIO.df$DOC..mg.L<-gsub("NPOC:","", UVBIO.df$DOC..mg.L)
UVBIO.df$DOC..mg.L<- gsub("mg/L", "", UVBIO.df$DOC..mg.L)
UVBIO.df$TN..mg.L<-gsub("TN:","", UVBIO.df$TN..mg.L)
UVBIO.df$TN..mg.L<- gsub("mg/L", "", UVBIO.df$TN..mg.L)

#convert DOC and TN to numeric
UVBIO.df$DOC..mg.L<-as.numeric(as.character(UVBIO.df$DOC..mg.L))
UVBIO.df$TN..mg.L<- as.numeric(as.character(UVBIO.df$TN..mg.L))

# add a time point
# if equals DOC_UV_T1_111721 then, T1, if not then "nothing"
UVBIO.df$Time.point<- as.factor(ifelse(UVBIO.df$File=="DOC_UV_T1.csv", "T1",
  ifelse(UVBIO.df$File=="DOC_NoUV_T1.csv", "T1",
          ifelse(UVBIO.df$File=="DOC_UV_T2.csv", "T2",
                ifelse(UVBIO.df$File=="DOC_NoUV_T2.csv", "T2", "T3")))))

#rearrange
UVBIO.df<- UVBIO.df %>% 
  dplyr::select(File, Time.point, Treatment, Filter.Trt, UV.Trt, Tank, plant.mass..g, DOC..mg.L, TN..mg.L)


# make levels for plotting and stats
# add in starting DOC and TN
# original data is... DOC_T0, DOC_T1, DOC_T2, DOC_T3, DOC_T4 -- but no need for DOC T0 and T4
# repeat 4x to account for the 4 treatments in each tank
DOC_T1.start<-rep(DOC_T1$DOC..mg.L, times=4)
DOC_T2.start<-rep(DOC_T2$DOC..mg.L, times=4)
DOC_T3.start<-rep(DOC_T3$DOC..mg.L, times=4)

TN_T1.start<-rep(DOC_T1$TN..mg.L, times=4)
TN_T2.start<-rep(DOC_T2$TN..mg.L, times=4)
TN_T3.start<-rep(DOC_T3$TN..mg.L, times=4)

# compile and add in as a new column
UVBIO.df$Start.DOC<-c(DOC_T1.start, DOC_T2.start, DOC_T3.start)
UVBIO.df$Start.TN<-c(TN_T1.start, TN_T2.start, TN_T3.start)

UVBIO.df$Burn.Filt.UV<-interaction(UVBIO.df$Treatment, UVBIO.df$Filter.Trt, UVBIO.df$UV.Trt)
UVBIO.df$Filt.UV<-interaction(UVBIO.df$Filter.Trt, UVBIO.df$UV.Trt)

```
Assign letters (A,B,C,D) and compute the following:

```{r}

#+UV/+Bio=A
#-UV/+Bio=B
#+UV/-Bio=C
#-UV/-Bio (NoUV,Filtered)=D

#seperate by time point
degra.df.T1<-UVBIO.df[(UVBIO.df$Time.point=="T1"),]
degra.df.T2<-UVBIO.df[(UVBIO.df$Time.point=="T2"),]
degra.df.T3<-UVBIO.df[(UVBIO.df$Time.point=="T3"),]

degra.df.T1$Filt.UV=gsub("Filtered.NoUV", "control", degra.df.T1$Filt.UV)
degra.df.T1$Filt.UV=gsub("Unfiltered.NoUV", "microbe", degra.df.T1$Filt.UV)
degra.df.T1$Filt.UV=gsub("Filtered.UV", "photo", degra.df.T1$Filt.UV)
degra.df.T1$Filt.UV=gsub("Unfiltered.UV", "total", degra.df.T1$Filt.UV)

#photodegradation= C-D

degra.df.T1$photo=degra.df.T1[degra.df.T1$Filt.UV=="Filtered.UV",]$DOC..mg.L-degra.df.T1[degra.df.T1$Filt.UV=="Filtered.NoUV",]$DOC..mg.L

degra.df.T2$photo=degra.df.T2[degra.df.T2$Filt.UV=="Filtered.UV",]$DOC..mg.L-degra.df.T2[degra.df.T2$Filt.UV=="Filtered.NoUV",]$DOC..mg.L

degra.df.T3$photo=degra.df.T3[degra.df.T3$Filt.UV=="Filtered.UV",]$DOC..mg.L-degra.df.T3[degra.df.T3$Filt.UV=="Filtered.NoUV",]$DOC..mg.L
#Microbe decomp= B-D
degra.df.T1$microbe=degra.df.T1[degra.df.T1$Filt.UV=="Unfiltered.NoUV",]$DOC..mg.L-degra.df.T1[degra.df.T1$Filt.UV=="Filtered.NoUV",]$DOC..mg.L

degra.df.T2$microbe=degra.df.T2[degra.df.T2$Filt.UV=="Unfiltered.NoUV",]$DOC..mg.L-degra.df.T2[degra.df.T2$Filt.UV=="Filtered.NoUV",]$DOC..mg.L

degra.df.T3$microbe=degra.df.T3[degra.df.T3$Filt.UV=="Unfiltered.NoUV",]$DOC..mg.L-degra.df.T3[degra.df.T3$Filt.UV=="Filtered.NoUV",]$DOC..mg.L

#Total decomp= A
degra.df.T1$total.decomp=degra.df.T1[degra.df.T1$Filt.UV=="Unfiltered.UV",]$DOC..mg.L-degra.df.T1[degra.df.T1$Filt.UV=="Filtered.NoUV",]$DOC..mg.L

degra.df.T2$total.decomp=degra.df.T2[degra.df.T2$Filt.UV=="Unfiltered.UV",]$DOC..mg.L-degra.df.T2[degra.df.T2$Filt.UV=="Filtered.NoUV",]$DOC..mg.L

degra.df.T3$total.decomp=degra.df.T3[degra.df.T1$Filt.UV=="Unfiltered.UV",]$DOC..mg.L-degra.df.T3[degra.df.T3$Filt.UV=="Filtered.NoUV",]$DOC..mg.L

#merge degra.df time points into one dataframe
degra.df=rbind(degra.df.T1, degra.df.T2, degra.df.T3)

# remove outliers
degra.df<-degra.df[!(degra.df$photo>=40),]
degra.df<-degra.df[!(degra.df$microbe>=40),]
degra.df<-degra.df[!(degra.df$total.decomp>=40),]
degra.df= degra.df[!(degra.df$photo<=-100),]
degra.df= degra.df[!(degra.df$microbe<=-100),]
degra.df= degra.df[!(degra.df$total.decomp<=-100),]


#Time 1
photo.T1=ggplot(degra.df[(degra.df$Time.point=="T1"),], aes(x=plant.mass..g, y=photo, color=Treatment)) + geom_point() +
scale_color_manual(values = c("brown1", "mediumseagreen")) + 
geom_smooth(method=loess, aes(fill=Treatment), alpha=0.1) +
ggtitle("Time-1: Photodegradation") +
coord_cartesian(ylim = c(-8,2))+
ylab(expression(paste(Delta, " DOC mg/L")))+
xlab("plant material (g)")+
Fig.formatting


microbe.T1=ggplot(degra.df[(degra.df$Time.point=="T1"),], aes(x=plant.mass..g, y=microbe, color=Treatment)) + geom_point() +
scale_color_manual(values = c("brown1", "mediumseagreen")) + 
geom_smooth(method=loess, aes(fill=Treatment), alpha=0.1) +
ggtitle("Time-1: Microbial Decomp.") +
coord_cartesian(ylim = c(-8,2))+
ylab(expression(paste(Delta, " DOC mg/L")))+
xlab("plant material (g)")+
Fig.formatting


total.T1=ggplot(degra.df[(degra.df$Time.point=="T1"),], aes(x=plant.mass..g, y=total.decomp, color=Treatment)) + geom_point() +
scale_color_manual(values = c("brown1", "mediumseagreen")) + 
geom_smooth(method=loess, aes(fill=Treatment), alpha=0.1) +
ggtitle("Time-1: Total Decomp.") +
coord_cartesian(ylim = c(-8,2))+
ylab(expression(paste(Delta, " DOC mg/L")))+
xlab("plant material (g)") +
Fig.formatting

  

T1.decomp.plots<-plot_grid(
  photo.T1+ theme(legend.position = "none"),
  microbe.T1+ theme(legend.position = "none"),
  total.T1+ theme(legend.position = "none"),
  extract.legend, 
  rel_widths = c(8,8,8,3), ncol=4)

T1.decomp.plots


#Time 2
photo.T2=ggplot(degra.df[(degra.df$Time.point=="T2"),], aes(x=plant.mass..g, y=photo, color=Treatment)) + geom_point() +
scale_color_manual(values = c("brown1", "mediumseagreen")) + 
geom_smooth(method=loess, aes(fill=Treatment), alpha=0.1) +
ggtitle("Time-2: Photodegradation") +
coord_cartesian(ylim = c(-8,2))+
ylab(expression(paste(Delta, " DOC mg/L")))+
xlab("plant material (g)") +
Fig.formatting



microbe.T2=ggplot(degra.df[(degra.df$Time.point=="T2"),], aes(x=plant.mass..g, y=microbe, color=Treatment)) + geom_point() +
scale_color_manual(values = c("brown1", "mediumseagreen")) + 
geom_smooth(method=loess, aes(fill=Treatment), alpha=0.1) +
ggtitle("Time-2: Microbial Decomp.") +
coord_cartesian(ylim = c(-8,2))+
ylab(expression(paste(Delta, " DOC mg/L")))+
xlab("plant material (g)") +
Fig.formatting

microbe.T2


total.T2=ggplot(degra.df[(degra.df$Time.point=="T2"),], aes(x=plant.mass..g, y=total.decomp, color=Treatment)) + geom_point() +
scale_color_manual(values = c("brown1", "mediumseagreen")) + 
geom_smooth(method=loess, aes(fill=Treatment), alpha=0.1) +
ggtitle("Time-2: Total Decomp.") +
coord_cartesian(ylim = c(-8,2))+
ylab(expression(paste(Delta, " DOC mg/L")))+
xlab("plant material (g)") +
Fig.formatting

  

T2.decomp.plots<-plot_grid(
  photo.T2+ theme(legend.position = "none"),
  microbe.T2+ theme(legend.position = "none"),
  total.T2+ theme(legend.position = "none"),
  extract.legend, 
  rel_widths = c(8,8,8,3), ncol=4)

T2.decomp.plots

#Time 3
photo.T3=ggplot(degra.df[(degra.df$Time.point=="T3"),], aes(x=plant.mass..g, y=photo, color=Treatment)) + geom_point() +
scale_color_manual(values = c("brown1", "mediumseagreen")) + 
geom_smooth(method=loess, aes(fill=Treatment), alpha=0.1) +
ggtitle("Time-3: Photodegradation") +
coord_cartesian(ylim = c(-8,2))+
ylab(expression(paste(Delta, " DOC mg/L")))+
xlab("plant material (g)") +
Fig.formatting
photo.T3

microbe.T3=ggplot(degra.df[(degra.df$Time.point=="T3"),], aes(x=plant.mass..g, y=microbe, color=Treatment)) + geom_point() +
scale_color_manual(values = c("brown1", "mediumseagreen")) + 
geom_smooth(method=loess, aes(fill=Treatment), alpha=0.1) +
ggtitle("Time-3: Microbial Decomp.") +
coord_cartesian(ylim = c(-8,2))+
ylab(expression(paste(Delta, " DOC mg/L")))+
xlab("plant material (g)") +
Fig.formatting

total.T3=ggplot(degra.df[(degra.df$Time.point=="T3"),], aes(x=plant.mass..g, y=total.decomp, color=Treatment)) + geom_point() +
scale_color_manual(values = c("brown1", "mediumseagreen")) + 
geom_smooth(method=loess, aes(fill=Treatment), alpha=0.1) +
ggtitle("Time-3: Total Decomp.") +
coord_cartesian(ylim = c(-8,2))+
ylab(expression(paste(Delta, " DOC mg/L")))+
xlab("plant material (g)") +
Fig.formatting
  

T3.decomp.plots<-plot_grid(
  photo.T3+ theme(legend.position = "none"),
  microbe.T3+ theme(legend.position = "none"),
  total.T3+ theme(legend.position = "none"),
  extract.legend, 
  rel_widths = c(8,8,8,3), ncol=4)

T3.decomp.plots

#all time points
all.decomp.plots<-plot_grid(
  T1.decomp.plots, 
  T2.decomp.plots,
  T3.decomp.plots,
  ncol=1)

all.decomp.plots



```













  
Process the UVBio and get ready for plotting
```{r}
UVBIO.df$Burn.Filt.UV<-interaction(UVBIO.df$Treatment, UVBIO.df$Filter.Trt, UVBIO.df$UV.Trt)
UVBIO.df$Filt.UV<-interaction(UVBIO.df$Filter.Trt, UVBIO.df$UV.Trt)

# correct to make factor levels
UVBIO.df$Filter.Trt<-as.factor(UVBIO.df$Filter.Trt)
UVBIO.df$UV.Trt <-as.factor(UVBIO.df$UV.Trt)

# make new variables
# (1) change in DOC over the 7d incubation
UVBIO.df$change.DOC<- UVBIO.df$DOC..mg.L - UVBIO.df$Start.DOC # final value (lower) - start
UVBIO.df$change.TN<-  UVBIO.df$TN..mg.L - UVBIO.df$Start.TN 

# (1) % change in DOC over the 7d incubation
UVBIO.df<-mutate (UVBIO.df, percent.change.DOC=((UVBIO.df$DOC..mg.L - UVBIO.df$Start.DOC)/Start.DOC)*100)
UVBIO.df<-mutate (UVBIO.df, percent.change.TN=((UVBIO.df$TN..mg.L - UVBIO.df$Start.TN)/Start.TN)*100)

```
Plot the UV Bio as % change, using the values of the tank DOC at deployment as start DOC, then the values of DOC after 7d as the final. Get the difference (final-start), should be a negative if values decline over incubation), then make a % by dividing by the start values of DOC.
  
  
Time 1 UV-BIO
```{r}
# remove outliers
UVBIO.df<-UVBIO.df[!(UVBIO.df$percent.change.DOC>=40),]
UVBIO.df<-UVBIO.df[!(UVBIO.df$percent.change.DOC<=-100),]
# all data frames by time
UVBIO.df.T1<-UVBIO.df[(UVBIO.df$Time.point=="T1"),]
UVBIO.df.T2<-UVBIO.df[(UVBIO.df$Time.point=="T2"),]
UVBIO.df.T3<-UVBIO.df[(UVBIO.df$Time.point=="T3"),]

# these are all separated by the 4 incubation treatment levels
Filt.UV.T1 <-UVBIO.df.T1[UVBIO.df.T1$Filter.Trt=="Filtered" & UVBIO.df.T1$UV.Trt=="UV",]
Filt.NoUV.T1<-UVBIO.df.T1[(UVBIO.df.T1$Filter.Trt=="Filtered" & UVBIO.df.T1$UV.Trt=="NoUV"),]
NFilt.UV.T1 <-UVBIO.df.T1[UVBIO.df.T1$Filter.Trt=="Unfiltered" & UVBIO.df.T1$UV.Trt=="UV",]
NFilt.NoUV.T1 <-UVBIO.df.T1[UVBIO.df.T1$Filter.Trt=="Unfiltered" & UVBIO.df.T1$UV.Trt=="NoUV",]
```


UVBIO Plots
```{r}
## Time 1 plots
Filt.UV.T1.plot<-ggplot(
  Filt.UV.T1, aes(x=plant.mass..g, y=percent.change.DOC, color=Treatment)) + 
  geom_point(alpha=0.5) +
  scale_color_manual(values = c("brown1", "mediumseagreen")) + 
  scale_linetype_manual(values=c("solid", "twodash")) +
  geom_smooth(method=loess, aes(fill=Treatment), alpha=0.1) +
  ggtitle("T1: -Bio, +UV") +
  coord_cartesian(ylim=c(-40, 60)) +
  ylab(expression(paste("%", Delta, " DOC mg/L"))) +
  xlab("plant material (g)")  +
  scale_y_continuous(name = expression(paste("%", Delta, " DOC mg/L")), sec.axis = sec_axis( trans=~.*1, name="Initial DOC mg/L")) +
  geom_line( aes(y=Start.DOC), size=1, linetype= "twodash") +
  Fig.formatting

Filt.NoUV.T1.plot<-ggplot(
  Filt.NoUV.T1, aes(x=plant.mass..g, y=percent.change.DOC, color=Treatment)) + 
  geom_point(alpha=0.5) +
  scale_color_manual(values = c("brown1", "mediumseagreen")) + 
  scale_linetype_manual(values=c("solid", "twodash")) +
  geom_smooth(method=loess, aes(fill=Treatment), alpha=0.1) +
  ggtitle("T1: -Bio, -UV") +
  coord_cartesian(ylim=c(-40, 60)) +
  ylab(expression(paste("%", Delta, " DOC mg/L"))) +
  xlab("plant material (g)")  +
  scale_y_continuous(name = expression(paste("%", Delta, " DOC mg/L")), sec.axis = sec_axis( trans=~.*1, name="Initial DOC mg/L")) +
  geom_line( aes(y=Start.DOC), size=1, linetype= "twodash") +
  Fig.formatting

NFilt.UV.T1.plot<-ggplot(
  NFilt.UV.T1, aes(x=plant.mass..g, y=percent.change.DOC, color=Treatment)) + 
  geom_point(alpha=0.5) +
  scale_color_manual(values = c("brown1", "mediumseagreen")) + 
  scale_linetype_manual(values=c("solid", "twodash")) +
  geom_smooth(method=loess, aes(fill=Treatment), alpha=0.1) +
  ggtitle("T1: +Bio, +UV") +
  coord_cartesian(ylim=c(-40, 60)) +
  ylab(expression(paste("%", Delta, " DOC mg/L"))) +
  xlab("plant material (g)")  +
  scale_y_continuous(name = expression(paste("%", Delta, " DOC mg/L")), sec.axis = sec_axis( trans=~.*1, name="Initial DOC mg/L")) +
  geom_line( aes(y=Start.DOC), size=1, linetype= "twodash") +
  Fig.formatting

NFilt.NoUV.T1.plot<-ggplot(
  NFilt.NoUV.T1, aes(x=plant.mass..g, y=percent.change.DOC, color=Treatment)) + 
  geom_point(alpha=0.5) +
  scale_color_manual(values = c("brown1", "mediumseagreen")) + 
  scale_linetype_manual(values=c("solid", "twodash")) +
  geom_smooth(method=loess, aes(fill=Treatment), alpha=0.1) +
  ggtitle("T1: -+Bio, -UV") +
  coord_cartesian(ylim=c(-40, 60)) +
  ylab(expression(paste("%", Delta, " DOC mg/L"))) +
  xlab("plant material (g)")  +
  scale_y_continuous(name = expression(paste("%", Delta, " DOC mg/L")), sec.axis = sec_axis( trans=~.*1, name="Initial DOC mg/L")) +
  geom_line( aes(y=Start.DOC), size=1, linetype= "twodash") +
  Fig.formatting

UVBio.T1<-plot_grid(
  Filt.UV.T1.plot+ theme(legend.position = "none"), 
  Filt.NoUV.T1.plot+ theme(legend.position = "none"),
  NFilt.UV.T1.plot+ theme(legend.position = "none"),
  NFilt.NoUV.T1.plot+ theme(legend.position = "none"),
  extract.legend, 
  rel_widths = c(8,8,8,8,3), ncol=5)

UVBio.T1

# these are all separated by the 4 incubation treatment levels
Filt.UV.T2 <-UVBIO.df.T2[UVBIO.df.T2$Filter.Trt=="Filtered" & UVBIO.df.T2$UV.Trt=="UV",]
Filt.NoUV.T2<-UVBIO.df.T2[(UVBIO.df.T2$Filter.Trt=="Filtered" & UVBIO.df.T2$UV.Trt=="NoUV"),]
NFilt.UV.T2 <-UVBIO.df.T2[UVBIO.df.T2$Filter.Trt=="Unfiltered" & UVBIO.df.T2$UV.Trt=="UV",]
NFilt.NoUV.T2 <-UVBIO.df.T2[UVBIO.df.T2$Filter.Trt=="Unfiltered" & UVBIO.df.T2$UV.Trt=="NoUV",]

## Time 2 plots
Filt.UV.T2.plot<-ggplot(Filt.UV.T2, aes(x=plant.mass..g, y=percent.change.DOC, color=Treatment)) + 
  geom_point(alpha=0.5) +
  scale_color_manual(values = c("brown1", "mediumseagreen")) + 
  scale_linetype_manual(values=c("solid", "twodash")) +
  geom_smooth(method=loess, aes(fill=Treatment), alpha=0.1) +
  ggtitle("T2: -Bio, +UV") +
  coord_cartesian(ylim=c(-50, 50)) +
  ylab(expression(paste("% ", Delta, " DOC mg/L"))) +
  xlab("plant material (g)") +
  scale_y_continuous(name = expression(paste("%", Delta, " DOC mg/L")), sec.axis = sec_axis( trans=~.*1, name="Initial DOC mg/L")) +
  geom_line( aes(y=Start.DOC), size=1, linetype= "twodash") +
  Fig.formatting


Filt.NoUV.T2.plot<-ggplot(
  Filt.NoUV.T2, aes(x=plant.mass..g, y=percent.change.DOC, color=Treatment)) + 
  geom_point(alpha=0.5) +
  scale_color_manual(values = c("brown1", "mediumseagreen")) + 
  scale_linetype_manual(values=c("solid", "twodash")) +
  geom_smooth(method=loess, aes(fill=Treatment), alpha=0.1) +
  ggtitle("T2: -Bio, -UV") +
  coord_cartesian(ylim=c(-50, 50)) +
  ylab(expression(paste("% ", Delta, " DOC mg/L"))) +
  xlab("plant material (g)") +
  scale_y_continuous(name = expression(paste("%", Delta, " DOC mg/L")), sec.axis = sec_axis( trans=~.*1, name="Initial DOC mg/L")) +
  geom_line( aes(y=Start.DOC), size=1, linetype= "twodash") +
  Fig.formatting

NFilt.UV.T2.plot<-ggplot(
  NFilt.UV.T2, aes(x=plant.mass..g, y=percent.change.DOC, color=Treatment)) + 
  geom_point(alpha=0.5) +
  scale_color_manual(values = c("brown1", "mediumseagreen")) + 
  scale_linetype_manual(values=c("solid", "twodash")) +
  geom_smooth(method=loess, aes(fill=Treatment), alpha=0.1) +
  ggtitle("T2: +Bio, +UV") +
  coord_cartesian(ylim=c(-50, 50)) +
  ylab(expression(paste("% ", Delta, " DOC mg/L"))) +
  xlab("plant material (g)")  +
  scale_y_continuous(name = expression(paste("%", Delta, " DOC mg/L")), sec.axis = sec_axis( trans=~.*1, name="Initial DOC mg/L")) +
  geom_line( aes(y=Start.DOC), size=1, linetype= "twodash") +
  Fig.formatting

NFilt.NoUV.T2.plot<-ggplot(
  NFilt.NoUV.T2, aes(x=plant.mass..g, y=percent.change.DOC, color=Treatment)) + 
  geom_point(alpha=0.5) +
  scale_color_manual(values = c("brown1", "mediumseagreen")) + 
  scale_linetype_manual(values=c("solid", "twodash")) +
  geom_smooth(method=loess, aes(fill=Treatment), alpha=0.1) +
  ggtitle("T2: +Bio, -UV") +
  coord_cartesian(ylim=c(-50, 50)) +
  ylab(expression(paste("% ", Delta, " DOC mg/L"))) +
  xlab("plant material (g)") +
  scale_y_continuous(name = expression(paste("%", Delta, " DOC mg/L")), sec.axis = sec_axis( trans=~.*1, name="Initial DOC mg/L")) +
  geom_line( aes(y=Start.DOC), size=1, linetype= "twodash") +
  Fig.formatting

UVBio.T2<-plot_grid(
  Filt.UV.T2.plot+ theme(legend.position = "none"), 
  Filt.NoUV.T2.plot+ theme(legend.position = "none"),
  NFilt.UV.T2.plot+ theme(legend.position = "none"),
  NFilt.NoUV.T2.plot+ theme(legend.position = "none"),
  extract.legend, 
  rel_widths = c(8,8,8,8,3), ncol=5)
UVBio.T2

# these are all separated by the 4 incubation treatment levels
Filt.UV.T3 <-UVBIO.df.T3[UVBIO.df.T3$Filter.Trt=="Filtered" & UVBIO.df.T3$UV.Trt=="UV",]
Filt.NoUV.T3<-UVBIO.df.T3[(UVBIO.df.T3$Filter.Trt=="Filtered" & UVBIO.df.T3$UV.Trt=="NoUV"),]
NFilt.UV.T3 <-UVBIO.df.T3[UVBIO.df.T3$Filter.Trt=="Unfiltered" & UVBIO.df.T3$UV.Trt=="UV",]
NFilt.NoUV.T3 <-UVBIO.df.T3[UVBIO.df.T3$Filter.Trt=="Unfiltered" & UVBIO.df.T3$UV.Trt=="NoUV",]

## Time 3 plots
Filt.UV.T3.plot<-ggplot(
  Filt.UV.T3, aes(x=plant.mass..g, y=percent.change.DOC, color=Treatment)) + 
  geom_point(alpha=0.5) +
  scale_color_manual(values = c("brown1", "mediumseagreen")) + 
  scale_linetype_manual(values=c("solid", "twodash")) +
  geom_smooth(method=loess, aes(fill=Treatment), alpha=0.1) +
  ggtitle("T3: -Bio, +UV") +
  coord_cartesian(ylim=c(-20, 40)) +
  ylab(expression(paste("% ", Delta, " DOC mg/L"))) +
  xlab("plant material (g)") +
  scale_y_continuous(name = expression(paste("%", Delta, " DOC mg/L")), sec.axis = sec_axis( trans=~.*1, name="Initial DOC mg/L")) +
  geom_line( aes(y=Start.DOC), size=1, linetype= "twodash") +
  Fig.formatting

Filt.NoUV.T3.plot<-ggplot(
  Filt.NoUV.T3, aes(x=plant.mass..g, y=percent.change.DOC, color=Treatment)) + 
  geom_point(alpha=0.5) +
  scale_color_manual(values = c("brown1", "mediumseagreen")) + 
  scale_linetype_manual(values=c("solid", "twodash")) +
  geom_smooth(method=loess, aes(fill=Treatment), alpha=0.1) +
  ggtitle("T3: -Bio, -UV") +
  coord_cartesian(ylim=c(-20, 40)) +
  ylab(expression(paste("% ", Delta, " DOC mg/L"))) +
  xlab("plant material (g)") +
  scale_y_continuous(name = expression(paste("%", Delta, " DOC mg/L")), sec.axis = sec_axis( trans=~.*1, name="Initial DOC mg/L")) +
  geom_line( aes(y=Start.DOC), size=1, linetype= "twodash") +
  Fig.formatting

NFilt.UV.T3.plot<-ggplot(
  NFilt.UV.T3, aes(x=plant.mass..g, y=percent.change.DOC, color=Treatment)) + 
  geom_point(alpha=0.5) +
  scale_color_manual(values = c("brown1", "mediumseagreen")) + 
  scale_linetype_manual(values=c("solid", "twodash")) +
  geom_smooth(method=loess, aes(fill=Treatment), alpha=0.1) +
  ggtitle("T3: +Bio, +UV") +
  coord_cartesian(ylim=c(-20, 40)) +
  ylab(expression(paste("% ", Delta, " DOC mg/L"))) +
  xlab("plant material (g)") +
  scale_y_continuous(name = expression(paste("%", Delta, " DOC mg/L")), sec.axis = sec_axis( trans=~.*1, name="Initial DOC mg/L")) +
  geom_line( aes(y=Start.DOC), size=1, linetype= "twodash") +
  Fig.formatting

NFilt.NoUV.T3.plot<-ggplot(
  NFilt.NoUV.T3, aes(x=plant.mass..g, y=percent.change.DOC, color=Treatment)) + 
  geom_point(alpha=0.5) +
  scale_color_manual(values = c("brown1", "mediumseagreen")) + 
  scale_linetype_manual(values=c("solid", "twodash")) +
  geom_smooth(method=loess, aes(fill=Treatment), alpha=0.1) +
  ggtitle("T3: +Bio, -UV") +
  coord_cartesian(ylim=c(-20, 40)) +
  ylab(expression(paste("% ", Delta, " DOC mg/L"))) +
  xlab("plant material (g)")  +
  scale_y_continuous(name = expression(paste("%", Delta, " DOC mg/L")), sec.axis = sec_axis( trans=~.*1, name="Initial DOC mg/L")) +
  geom_line( aes(y=Start.DOC), size=1, linetype= "twodash") +
  Fig.formatting

UVBio.T3<-plot_grid(
  Filt.UV.T3.plot+ theme(legend.position = "none"), 
  Filt.NoUV.T3.plot+ theme(legend.position = "none"),
  NFilt.UV.T3.plot+ theme(legend.position = "none"),
  NFilt.NoUV.T3.plot+ theme(legend.position = "none"),
  extract.legend, 
  rel_widths = c(8,8,8,8,3), ncol=5)

  max(UVBIO.df.T2$percent.change.DOC)

#compile all plots
all.UV.Bio<-plot_grid(
  UVBio.T1, 
  UVBio.T2,
  UVBio.T3,
  ncol=1)

all.UV.Bio


```

1) ANCOVA 
```{r}
#This includes time point as fixed effect
#but we need to include this as a random effect 
DOC.ancova=aov(DOC..mg.L~Treatment*plant.mass..g*Time.point, data=DOC.df)
DOC.ancova.summary=Anova(DOC.ancova, type="III")
DOC.ancova.summary
#no effect of burning on DOC (maybe check EEMS chemistry)
```
This is a no go...too much variation between time points (need to be random effect) and nonlinearity suggests that we need a better model


2) LME
```{r}
####### now with random effects: a random effects model allows the flexibility for each time point to have it’s own unique regression relationship, only informed by the grand means if lacking information on their own.

# Random effects model (both intercept and slope are random)
#visualize
scatterplot(DOC..mg.L~plant.mass..g|Time.point, data=DOC.df)

#fit model with plant biomass|time.point which will give the effect of biomass for each time point rather than 1|time.point which only give  a random intercept for that variable alone.
library(nlme)
library(car)
#log transformed DOC
DOC.rand=lmer(log10(DOC..mg.L)~plant.mass..g + (1|Time.point), data= DOC.df, control = lmerControl(optimizer ="Nelder_Mead")) 
summary(DOC.rand)

#residuals
plot(DOC.rand)
qqnorm(resid(DOC.rand))
qqline(resid(DOC.rand))

```
Again this hold the assumption that our data is linear. Even with log transformation the residuals are off due to heavy tails. We could maybe try different transformations but again that might make interpretation more difficult...


```{r}
#As another technical note, REML stands for restricted maximum likelihood.  It is a method of fitting the model, and is often considered better than fitting with a conventional ML (maximum likelihood) method.

#visualize nonlinearity
library(ggplot2)
DOC.scatter= ggplot(DOC.df, aes(x= plant.mass..g, y= DOC..mg.L, color= Treatment))+
  geom_point()+
  geom_smooth(methods= "loess")+
  facet_grid(Time.point~Treatment)

DOC.scatter
#we can see that the data is nonlinear (logistical growth with DOC increasing with increasing biomass). This pattern diminishes across time points with DOC concentrations becoming more linear with biomass.

#box plot
ggplot(DOC.df, aes(x=Time.point, y=DOC..mg.L, fill= Treatment)) + 
  geom_boxplot()

#line graph
stripchart(DOC..mg.L ~ Time.point, vertical = TRUE, pch = 1, xlab = "Time Point", 
           data = DOC.df)

#Density plot
ggplot(DOC.df, aes(x = DOC..mg.L, fill=Treatment)) +
geom_density(alpha=0.5) +
facet_wrap(~ Time.point, scales = "free")

```
Mixed models are typically use to account for correlations we expect to have in the data. By putting a random effect per time points we assume that DOC measurements are correlated within each group. Okay then, so if it does turn out that the residuals are not normally distributed, what to do next depends...DV is DOC conc. If we take the log of DOC, then the model will have effects that change DOC multiplicatively rather than additively. That is a 1 unit change in an IV will lead to multiplying the expected value of the DV by a constant. If it doesn't, then maybe we need a nonlinear multilevel model. Stream of consciousness time regarding the structure of the data:

plant type (sage or willow) are in every tank with increasing plant quantities
every tank is assigned one of two treatments (burned or unburned sage/willow)
each tank is repeatedly sampled at random time points

DV: DOC conc (level 1 outcome variable)
IV/fixed: treatment (level 1 )
covariate: plant mass 
random: time point (level 2)

```{r}
#Lets do a log transformation
#but variation arises between time points so we'll still add that but use random slopes and intercepts that are uncorrelated...we will compare models below:


#random intercept model
m1= lmer(log10(DOC..mg.L) ~ 1 + (1 | Time.point), REML= F, data=DOC.df)
summary(m1)
plot(resid(m1))
qqnorm(resid(m1))
qqline(resid(m1))
#m1 with fixed intercept, and random intercept varying across time point. REML = F for standard MLE. Variace of the means across time points

m2= lmer(log10(DOC..mg.L) ~ plant.mass..g * Treatment + (1+plant.mass..g|Time.point), control = lmerControl(optimizer ="Nelder_Mead"), data= DOC.df)
summary(m2)
plot(resid(m2))
qqnorm(resid(m2))
qqline(resid(m2))
#better??
#Model m2 adds a separate slope for each subject. 

```
To save myself time, I played around with various models (fixed, random slopes and intercepts, polynomials, etc.) and data transformations (sqrt, cube root, log, etc.). The raw data is right skewed which is why I chose to maybe transform it and fit it to a linear model...no luck. It produces heavy-tailed residuals. The next best option I came across is to use splines...here's my attempt:

```{r}
install.packages("mgcv")
library(mgcv)
library(tidyverse)
library(gratia)
library(gam)

m1.gam= gam(DOC..mg.L~ s(plant.mass..g, k= 15),
                data= DOC.df,
                family= poisson(link = "log"),
                method='REML')

summary(m1.gam)
#bivariate thin plate spline
#k is upper limit on df
#estimate using REML

#we can check the residuals
ggplot(data.frame(Fitted= fitted(m1.gam), 
                  Resid= resid(m1.gam)), 
       aes(Fitted, Resid)) + 
  geom_point()


m1= mgcv::gam(DOC..mg.L ~ s(plant.mass..g), data= DOC.df, method= "REML")
summary(m1)
plot(m1)

m2= mgcv::gam(DOC..mg.L~ plant.mass..g:Treatment + s(Time.point, bs = 're', k=5), data = DOC.df, method = 'REML')
summary(m2)
gam.check(m2)

summary(m2)

new_data <- tidyr::expand(DOC.df, nesting(plant.mass..g, Treatment),
                          Time.point = unique(Time.point))
m1_pred <- bind_cols(new_data,
                     as.data.frame(predict(m2, newdata = new_data,
                                           se.fit = TRUE)))

ggplot(m1_pred, aes(x = plant.mass..g, y = fit, group = Treatment,
                    colour = Treatment)) +
    geom_line() +
    facet_wrap(~ Time.point)

ggplot(m1_pred, aes(x = plant.mass..g, y = fit, group = Treatment,
                    colour = Treatment)) +
    geom_line() +
    geom_point(data = DOC.df, aes(y = DOC..mg.L)) +
    facet_wrap(~ Time.point)

############3
m3 = mgcv::gam(DOC..mg.L~ Treatment + s(plant.mass..g, by = Treatment) + s(Time.point, bs = "re"), data = DOC.df, method = "REML")
summary(m3)

m4= mgcv::gam(DOC..mg.L~ Treatment + s(plant.mass..g, by = Treatment)+ s(Time.point, Treatment, bs = "re"), data = DOC.df, method = "REML")
summary(m4)
###############
dataplot=qplot(DOC.df$plant.mass..g, DOC.df$DOC..mg.L) +
  geom_point(aes(y=DOC.df$DOC..mg.L)) +
facet_grid(~Time.point)+
  theme_bw()
dataplot


m0 <- mgcv::gam(DOC..mg.L ~  s(plant.mass..g) , data = DOC.df, method="REML")
summary(m0)






gam(y ~ x + s(ID,bs="re"))
gamm(y ~ x, random=list(ID=~1) )

```
Result: 
1) no affect of burning on DOC loading though the EEMS data may show that burned/unburned is chemically different, there is no significant effect on DOC.
2) there is a significant effect of plant biomass across time points on DOC loading.


Decomposition Data (graphing % change and mean)
```{r}
#packages
library(ggplot2)
library(scales)
library(ggprism)
library(dplyr)
library(patchwork)
library(tidyverse)
library(rstatix)
library(broom)
library(lme4)
library(car)
library(MASS)
library(ggpubr)
library(moments)
library(gridExtra)

#load files and rearrange 
decomp=read.csv("/Users/tobyspiegel2/Downloads/decomp - weights.csv")
names(decomp)[8]= "change"
names(decomp)[9]= "percent.change"
decomp=decomp[-c(61:82), ] 

#make a duplicate dataframe
decomp2=data.frame(decomp)
decomp2=decomp2 %>%
    mutate(
    across(c(9),
           .fns = ~./100)) 
decomp2$percent.change=gsub("-","", as.numeric(as.character(decomp2$percent.change)))
decomp2$percent.change=as.numeric(as.character(decomp2$percent.change))

decomp2=decomp2%>% 
 mutate(
    across(c(9),
           .fns = ~asin(sqrt(.))))

hist(decomp2$percent.change)

#creating order for axis
level_order<- c( "1", "2", "3", "4", "5", "6", "7", "8", "9", "10",
               "11", "12", "13", "14", "15", "16", "17", "18", "19", "20",
               "21", "22", "23", "24", "25", "26", "27", "28", "29", "30")

#bar graph
decomp.bar=ggplot(decomp2, aes( x = total.plant.mass..g, y = as.numeric(percent.change), fill = as.factor(treatment) ) ) +
geom_bar( stat = "identity") + 
facet_wrap(treatment ~ plant.type, scales= "free_x") + 
  scale_x_continuous("Tank Number", expand=c(0, 0), breaks = seq(1, 30, by = 2))+
labs( x = "Tank", y = "arcsin transformed % Change", title = "Sage and Willow % Decomposition Change by Treatment") +
theme( strip.text = element_text( size = 12, color = "white", hjust = 0.5 ),
       strip.background = element_rect( fill = "#858585", color = NA ),    
       panel.background = element_rect( fill = "#efefef", color = NA ),
       panel.grid.major.x = element_blank(),
       panel.grid.minor.x = element_blank(),
       panel.grid.minor.y = element_blank(),
       panel.grid.major.y = element_line( color = "#b2b2b2" ),
       plot.caption = element_text(hjust = 0, face = "italic"),
       legend.position = "right" )+
  guides(x = "prism_minor")
decomp.bar




decomp.bar=ggplot(decomp, aes( x = plant.specific.mass..g, y = as.numeric(percent.change), fill = as.factor(treatment) ) ) +
geom_bar( stat = "identity") + 
facet_wrap(treatment ~ plant.type, scales= "free_x") + 
scale_y_reverse()+
scale_x_continuous("Plant Specific Mass", breaks = seq(0, 200, 25))+
labs( x = "Tank", y = "arcsin transformed % Change", title = "Sage and Willow % Decomposition Change by Treatment") +
theme( strip.text = element_text( size = 12, color = "white", hjust = 0.5 ),
       strip.background = element_rect( fill = "#858585", color = NA ),    
       panel.background = element_rect( fill = "#efefef", color = NA ),
       panel.grid.major.x = element_blank(),
       panel.grid.minor.x = element_blank(),
       panel.grid.minor.y = element_blank(),
       panel.grid.major.y = element_line( color = "#b2b2b2" ),
       plot.caption = element_text(hjust = 0, face = "italic"),
       legend.position = "right" )+
    guides(x = "prism_minor")
decomp.bar

hist(decomp$percent.change)

#box plot
decomp.plot=ggplot(decomp, aes(x = total.plant.mass..g, y = percent.change, col = plant.type)) +
  facet_grid(~treatment, scales = "free")+
  geom_point() + 
  geom_smooth(formula = y ~ x, method = "loess") + 
  theme(legend.position="right")+ 
  labs(title= "% Decomposition Change Across Treatment by Plant Type")+
  ylab("% Decomp Change")+
  xlab("plant mass (g)")
decomp.plot

Fig.formatting

library(ggpubr)
ggarrange(decomp.bar, decomp.box, labels = c("A", "B"), ncol = 2, common.legend = TRUE, legend = "right")
ggsave("/Users/tobyspiegel2/Desktop/My_pyromania/Pyromania/decomp_plots.pdf", width = 15, height = 6)
```


```{r}
##run an ANCOVA for decomposition
#visualize it again
ggplot(decomp, aes(x = plant.specific.mass..g, y = percent.change, colour = treatment)) + 
  geom_smooth(methods= "loess")+
  xlab("plant specific mass (g)")+
  ylab("% Change")+
  labs(title ="Percent Change")+
  facet_wrap(~plant.type)+
  geom_point()

ggsave("/Users/tobyspiegel2/Desktop/My_pyromania/Pyromania/percent.change_decomp_plot.pdf", width = 15, height = 6)

ggplot(decomp, aes(x = plant.specific.mass..g, y = change, colour = treatment)) + 
geom_smooth(formula= y~x, method= "loess")+
  xlab("plant specific mass (g)")+
  ylab(expression(paste(Delta, "Decomp")))+
  labs(title="Absolute Change")+
  facet_wrap(~plant.type)+
  geom_point()

ggsave("/Users/tobyspiegel2/Desktop/My_pyromania/Pyromania/abs.change_decomp_plot.pdf", width = 15, height = 6)
#this can be interepreted as higher decomp in low mass tanks for both plant species with greater decomp difference in the willow species

#Let's state our variables:
#predictor: plant.specific.mass, treatment
#response: % change

#fit a full linear model
decomp.m1=aov(percent.change ~ plant.specific.mass..g*treatment*plant.type, data = decomp2)
summary(decomp.m1) 
qqnorm(resid(decomp.m1))
qqline(resid(decomp.m1))
#we can assume equal slopes since there is no significant interaction...proceed.

# Now explore characteristics of the residuals
res1 <- decomp.m1$residuals

# Cochran test for homogeneity of variance across groups (i.e., across Tone levels)
library(outliers)
d <- data.frame(res=res1, mass=decomp2$plant.specific.mass..g)
cochran.test(res~mass,data=d)

#take a look at qq plot of residuals
qqnorm(res1, ylab="Standardized Residuals", xlab="Normal Scores")
qqline(res1)
#heavy tailed

#run the Shapiro Test for normality
shapiro.test(res1)
#definitely not normal

#could also be accomplished by taking a look at diagnostic residual plots 
plot(decomp.m1)
qqnorm(resid(decomp.m1))
qqline(resid(decomp.m1))
# there are no obvious patterns in the residuals to indicate non-homogeneity of variance

#here we might want to try some transformations:
Box = boxcox(percent.change ~ 1,              # Transform Turbidity as a single vector
             lambda = seq(-6,6,0.1)      # Try values -6 to 6 by 0.1
             )
```
SUVA calculations
Time point 0
```{r}
#load file and rearrange
suva.t0=read.csv("/Users/tobyspiegel2/Desktop/My_pyromania/EEMS/SUVAresults/Results_T0.csv")
suva.t0$Sample.Name=gsub("\\..*", "", suva.t0$Sample.Name) 
names(suva.t0)[1]="tank"
suva.t0=suva.t0[-1,]
suva.t0$tank=gsub("T", "", suva.t0$tank) 
suva.t0$tank=as.numeric(suva.t0$tank)
suva.t0=suva.t0[order(suva.t0$tank),]
#add DOC_T0
suva.t0$DOC=DOC_T0$DOC..mg.L
#calculate SUVA
suva.t0$SUVA=(suva.t0$abs254/suva.t0$DOC)*100
```
Time point 1
```{r}
#load file and rearrange
library(dplyr)
suva.t1=read.csv("/Users/tobyspiegel2/Desktop/My_pyromania/EEMS/SUVAresults/Results_T1.csv")
suva.t1=suva.t1[-1,]
suva.t1=suva.t1[-1,]
names(suva.t1)[1]="tank"
suva.t1$tank=gsub("TA", "", suva.t1$tank) 
as.numeric(suva.t1$tank)
arrange(suva.t1, tank)
suva.t1$tank=gsub("(02)", "", suva.t1$tank) 
suva.t1$tank=gsub("(01)", "", suva.t1$tank) 
suva.t1$tank=gsub("[()]", "", suva.t1$tank)
suva.t1$tank=as.numeric(suva.t1$tank)
suva.t1=suva.t1[order(suva.t1$tank),]
#add DOC
suva.t1$DOC=DOC_T1$DOC..mg.L
#calculate SUVA
suva.t1$SUVA=(suva.t1$abs254/suva.t1$DOC)*100
```
Time point 2
```{r}
#load file and rearrange
suva.t2=read.csv("/Users/tobyspiegel2/Desktop/My_pyromania/EEMS/SUVAresults/Results_T2_d1A.edit.csv")
names(suva.t2)[1]="tank"
suva.t2$tank=gsub("TA", "", suva.t2$tank) 
suva.t2$tank=gsub("(01)", "", suva.t2$tank) 
suva.t2$tank=gsub("[()]", "", suva.t2$tank)
suva.t2$tank=as.numeric(suva.t2$tank)
suva.t2=suva.t2[order(suva.t2$tank),]
#add DOC
suva.t2$DOC=DOC_T2$DOC..mg.L
#calculate SUVA
suva.t2$SUVA=(suva.t2$abs254/suva.t2$DOC)*100

```
Time point 3
```{r}
suva.t3=read.csv("/Users/tobyspiegel2/Desktop/My_pyromania/EEMS/SUVAresults/Results_T3.csv")
names(suva.t3)[1]="tank"
suva.t3$tank=gsub("TA", "", suva.t3$tank) 
suva.t3$tank=gsub("(01)", "", suva.t3$tank) 
suva.t3$tank=gsub("[()]", "", suva.t3$tank)
suva.t3$tank=as.numeric(suva.t3$tank)
suva.t3=suva.t3[order(suva.t3$tank),]
#add DOC
suva.t3$DOC=DOC_T3$DOC..mg.L
#calculate SUVA
suva.t3$SUVA=(suva.t3$abs254/suva.t3$DOC)*100

```
Time point 4
```{r}
suva.t4=read.csv("/Users/tobyspiegel2/Desktop/My_pyromania/EEMS/SUVAresults/Results_T4.csv")
names(suva.t4)[1]="tank"
suva.t4$tank=gsub("TA", "", suva.t4$tank) 
suva.t4$tank=gsub("(01)", "", suva.t4$tank) 
suva.t4$tank=gsub("[()]", "", suva.t4$tank)
suva.t4$tank=as.numeric(suva.t4$tank)
suva.t4=suva.t4[order(suva.t4$tank),]
#add DOC
suva.t4$DOC=DOC_T4$DOC..mg.L
#calculate SUVA
suva.t4$SUVA=(suva.t4$abs254/suva.t4$DOC)*100


```
Combine them all
```{r}
suva=rbind(suva.t0, suva.t1, suva.t2, suva.t3, suva.t4)
suva$Time.point=DOC.df$Time.point
suva$treatment=DOC.df$Treatment
suva$plant.biomass=DOC.df$plant.mass..g

#visualize
ggplot(suva, aes(x= plant.biomass, y= SUVA, color= treatment))+
  geom_point()+
  geom_smooth(methods= "loess")+
  facet_grid(~Time.point, scales = "free")

ggsave("/Users/tobyspiegel2/Desktop/My_pyromania/Pyromania/SUVA_plot.pdf", width = 15, height = 6)

```

